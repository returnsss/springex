-- SELECT NAME AS 도시,popu AS "인구(만명)",region AS 지역 FROM tcity;
-- SELECT * FROM tcity;

-- SELECT NAME,popu * 10000 AS "인구(명)" FROM tcity;

-- SELECT NAME,AREA,popu,popu * 10000 / area AS "인구밀도" FROM tcity;

-- SELECT 60*60*24 AS "하루" FROM DUAL;

-- SELECT 60*60*24*365;

-- SELECT COUNT(*) AS "총 직원수" FROM tStaff;

-- SELECT * FROM tcity WHERE AREA > 1000;

-- 숫자는 상수를 그냥 쓰지만 문자열과 날짜 상수는 항상 작은 따옴표로 감싸야 함
-- SELECT * FROM tCity WHERE name = '서울';   --맞음
-- SELECT * FROM tCity WHERE name = 서울;     --틀림
-- SELECT * FROM tCity WHERE name = "서울";   --틀림 ,단 마리아는 허용

-- 필드와 영문자를 비교할 때는 대소문자 주의.
-- SELECT * FROM tcity WHERE metro = 'y';
-- SELECT * FROM tcity WHERE metro = 'Y';

-- 인구가 10만명 미만인 도시의 이름을 출력하라
-- SELECT NAME,popu FROM tcity WHERE popu < 10;

-- 전라도에 있는 도시의 정보를 출력하라
-- SELECT * FROM tcity WHERE region = '전라';

-- 월급이 400만원 이상인 직원의 이름을 출력하라
-- SELECT NAME,salary FROM tstaff WHERE salary >= 400;

-- NULL 비교
-- NULL은 바뀔수 있는 값
-- NULL은 값이 아니라 상태이기 때문에 = 연산자로 비교 할 수 없음
-- NULL인 값을 찾을 때 : IS
-- NULL이 아닌 값을 찾을 때 : IS NOT

-- SELECT * FROM tstaff WHERE score is NULL;
-- SELECT * FROM tStaff WHERE score IS NOT NULL;

-- 논리 연산자
-- AND OR
-- 세 개 이상의 조건문을 지정할 때도 마찬가지로 WHERE절을 작성하되 조건의 우선순위에 주의.
-- AND의 우선순위가 OR보다 높음.
-- 애매할 경우에는 괄호로 우선 순위를 지정하는 것이 좋음.

-- SELECT * FROM tcity WHERE popu >= 100 AND AREA >= 700;
-- SELECT * FROM tcity WHERE popu >= 100 OR AREA >= 700;

-- SELECT * FROM tcity WHERE region = '경기' AND popu >= 50 OR AREA >= 500;
-- SELECT * FROM tcity WHERE AREA >= 500 OR region = '경기' AND popu >= 50;

-- SELECT * FROM tcity WHERE region = '경기' AND (popu >= 50 OR AREA >= 500);

-- NOT 연산자는 표현식의 진위 여부를 반대로 바꿈.
-- SELECT * FROM tcity WHERE region != '경기';
-- SELECT * FROM tcity WHERE NOT (region = '경기');

-- 복합 조건의 반대를 취할때는 NOT이 편리
-- SELECT * FROM tcity WHERE region = '전라' OR metro = 'y';
-- SELECT * FROM tcity WHERE NOT(region = '전라' OR metro = 'y');

-- 연습문제
-- 직원 목록에서 월급이 300 미만이면서 성취도는 60이상인 직원이 누구인지 조사하라
-- SELECT NAME FROM tstaff WHERE salary < 300 AND score >= 60;

-- 영업부의 여직원 이름을 조사하라
-- SELECT NAME FROM tstaff WHERE depart = '영업부' AND gender = '여';

-- LIKE
-- % 복수개의 문자와 대응. %자리에는 임의 개수의 임의 문자가 올 수 있음

-- SELECT * FROM tcity WHERE NAME LIKE '%천%';
-- SELECT * FROM tcity WHERE NAME LIKE '%홍%';

-- SELECT * FROM tcity WHERE NAME NOT LIKE '%천%';

-- SELECT * FROM tcity WHERE NAME LIKE '천%'; --천으로 시작하는 단어 검색
-- SELECT * FROM tcity WHERE NAME LIKE '%천'; --천으로 끝나는 단어 검색

-- SELECT * FROM tcity WHERE TRIM(NAME) LIKE '%천'; -- 천으로 끝나는 단어중 앞뒤 띄어쓰기 없애고 검색


-- 연습문제
-- 직원 목록에서 '정'씨를 조사하라.
-- SELECT * FROM tstaff WHERE NAME LIKE '정%';

-- 이름에 '신'자가 포함된 직원을 조사하라.
-- SELECT * FROM tstaff WHERE NAME not LIKE '신%' AND NAME LIKE '%신%';

-- BETWEEN
-- SELECT * FROM tcity WHERE popu BETWEEN 50 AND 100; -- 50이상 100이하
-- SELECT * FROM tcity WHERE popu >= 50 AND popu <= 100; --위와 같은 식

-- SELECT * FROM tstaff WHERE NAME BETWEEN '가' AND '사';
-- SELECT * FROM tstaff WHERE joindate BETWEEN '20150101' AND '20180101';

-- 연습문제
-- 면적 500~1000사이의 도시 목록을 조사하라.
-- SELECT NAME FROM tcity WHERE AREA BETWEEN 500 AND 1000;

-- 월급이 200만원대인 직원의 목록을 구하라.
-- SELECT NAME FROM tstaff WHERE salary >= 200 AND salary < 300;


-- IN
-- OR연산자라고 보면됨

-- SELECT * FROM tcity WHERE region IN ('경상','전라');
-- SELECT * FROM tcity WHERE region = '경상' OR region = '전라';

-- NOT IN
-- SELECT * FROM tcity WHERE region NOT IN ('경상','전라');


-- SELECT * FROM tstaff WHERE NAME LIKE IN ('이%','안%'); -- 안됨
-- SELECT * FROM tstaff WHERE NAME LIKE '이%' OR name LIKE '안%'; -- 됨

/*
-- 연습문제
-- 총무부나 영업부에 근무하는 직원의 목록을 조사하라
SELECT NAME FROM tstaff WHERE depart IN ('총무부','영업부');

-- 인사과나 영업부에 근무하는 대리의 목록을 조사하라
SELECT * FROM tstaff WHERE depart IN ('인사과','영업부') AND grade = '대리';

-- 차장급 이상의 여직원 목록을 조사하라
SELECT * FROM tstaff WHERE grade IN ('차장','부장','이사') AND gender = '여';
*/


-- ====================================================================================
-- ORDER BY
-- ASC || DESC (오름차순, 내림차순)
-- ASC가 기본값이라서 생략 가능

-- SELECT * FROM tcity ORDER BY popu; -- (오름차순으로 정렬)
-- SELECT * FROM tcity ORDER BY popu DESC; -- (내림차순으로 정렬)

-- SELECT region,NAME,AREA,popu FROM tcity ORDER BY region, NAME DESC; -- region먼저 오름차순으로 정렬후, name을 내림차순으로 정렬


-- ORDER BY 기준은 보통 필드명으로 하지만 순서값으로도 지정가능.
-- 필드 순서 값은 테이블 생성시에 등록한순서

-- SELECT * FROM tcity ORDER BY AREA;
-- SELECT * FROM tcity ORDER BY 2; -- 위와 같은 값

-- 테이블에 존재하지 않은 계산 값도 정렬 기준으로 사용 할 수 있음
-- SELECT NAME, popu * 10000 / AREA FROM tcity ORDER BY popu * 10000 / AREA;
-- SELECT NAME, popu * 10000 / AREA AS tmp FROM tcity ORDER BY tmp;

-- 순서
-- SELECT * FROM tcity WHERE region = '경기' ORDER BY AREA; -- where가 order by보다 앞에 있어야함


-- 연습문제
-- 직원 목록을 월급이 적은 사람부터 순서대로 출력하되 월급이 같다면 성취도가 높은 사람을 먼저 출력하라.
-- SELECT * FROM tstaff ORDER BY salary,score DESC;

-- 영업부 직원을 먼저 입사한 순서대로 정렬하라.
-- SELECT * FROM tstaff WHERE depart = '영업부' ORDER BY joindate;

-- ==============================================================================================

-- DISTINCT
-- 중복 값 제거
-- SELECT region FROM tcity; -- tcity의 region값 출력
-- SELECT distinct region FROM tcity; -- tcity의 region값 중복없이 출력
-- SELECT distinct region FROM tcity ORDER BY region; -- tcity의 region값 중복없이 오름차순으로  출력

-- SELECT DISTINCT depart FROM tstaff; -- 회사에 부서가 뭐가 있는지 확인

-- 연습문제
-- 2020년 이후 신입 사원을 받은 적이 있는 부서 목록을 조사하라.
-- SELECT distinct depart FROM tstaff WHERE joindate >= '20200101';


-- ===============================================================================================

-- LIMIT
-- LIMIT 구문으로 행 수를 제한
-- SELECT .... LIMIT [건너뛸 개수], 총개수
-- 건너뛸 개수를 생략하면 0으로 적용하여 첫 행부터 출력.

-- SELECT * FROM tcity ORDER BY AREA DESC LIMIT 4; -- 첫행부터 4개만 출력

-- SELECT * FROM tcity ORDER BY AREA DESC LIMIT 2,3; -- 2개 건너뛰고 3개만 출력
-- SELECT * FROM tcity ORDER BY AREA DESC LIMIT 3 OFFSET 2; -- 2개 건너뛰고 3개만 출력

-- ==================================================================================================

-- OFFSET FETCH
-- ORDER BY 기준필드 OFFSET 건너뛸 행 수 ROWS FETCH NEXT 출력할 행 수 ROWS ONLY;
-- SELECT * FROM tcity ORDER BY AREA DESC OFFSET 0 ROWS fetch NEXT 4 ROWS ONLY; -- LIMIT 0,4;와 같음


-- 연습문제
-- 직원을 월급순으로 낮은 순서로 정렬한 후 12위에서 16위까지 출력하라.
-- 월급이 같은 경우에는 이름을 가나다라 순으로 하라.

-- SELECT * FROM tstaff ORDER BY salary,name LIMIT 11,5;

-- ====================================================================================================
-- count
-- count는 개수를 세는 기능을 하는데, 개수를 조사할 필드명을 전달하는데 * 지정하면
-- 필드에 상관없이 조건에 맞는 레코드 개수를 리턴

-- SELECT COUNT(*) FROM tstaff;

-- SELECT COUNT(*) AS "총 직원수" FROM tstaff;

-- SELECT COUNT(*) FROM tstaff WHERE salary >= 400;

-- SELECT COUNT(*) FROM tstaff WHERE salary >= 10000;

-- SELECT COUNT(DISTINCT depart) AS '부서 수' FROM tstaff;

-- SELECT COUNT(*) - COUNT(score) FROM tstaff;

-- SELECT COUNT(*) FROM tstaff WHERE score IS NULL;

-- 연습문제
-- 실적도 없이 놀고 있는 두 직원은 누구인지 목록을 출력하는 쿼리를 작성하라
-- SELECT name FROM tstaff WHERE score IS NULL;

-- 성취도가 80점 이상인 직원이 몇 명이나 되는지 조사하라
-- SELECT COUNT(*) FROM tstaff WHERE score >= 80;

-- ============================================================================================
-- 함수       설명

-- SUM        총합을 구함
-- AVG        평균을 구함
-- MIN        최소값을 구함
-- MAX        최대값을 구함
-- STDDEV     표준편차를 구함
-- VARIANCE   분산을 구함

-- SELECT MIN(AREA),MAX(AREA) FROM tcity;

-- SELECT SUM(score), AVG(score) FROM tstaff WHERE depart = '인사과';

-- SELECT MIN(salary), MAX(salary) FROM tstaff WHERE depart = '영업부';

-- SELECT SUM(NAME) FROM tstaff; -- 문자열은 더하거나 평균 낼 수 없음
-- SELECT MIN(NAME), MAX(NAME) FROM tstaff; -- 사전순으로 연산하여 최대 최소값은 출력 가능

-- SELECT MAX(popu),NAME FROM tcity; -- 에러 //  집계함수와 필드명 동시사용 X 

-- 인구 수가 가장 큰 도시의 name과 popu를 출력
-- SELECT NAME, popu from tcity ORDER BY popu DESC LIMIT 1;

-- 연습문제
-- 여직원 중 최고 월급은 얼마인지 조사하라.
-- SELECT salary FROM tstaff WHERE gender = '여' ORDER BY salary DESC LIMIT 1;
-- SELECT MAX(salary) FROM tstaff WHERE gender = '여';

-- 총무부 직원이 최초로 입사한 날짜를 구하라.
-- SELECT joindate FROM tstaff WHERE depart = '총무부' ORDER BY joindate LIMIT 1;
-- SELECT MIN(joindate) FROM tstaff WHERE depart = '총무부';


-- ====================================================================================================
-- 집계 함수와 NULL
-- NULL은 값을 알 수 없는 특수한 상태.
-- 집계 함수는 NULL을 포함하지 않음
-- 단, COUNT는 예외

-- SELECT AVG(score) FROM tstaff; -- 66.411111  AVG는 18로 나눔

-- SELECT SUM(score)/COUNT(*) FROM tstaff; -- 59.770000   20으로 나눔


-- SELECT COUNT(*) FROM tstaff WHERE depart = '비서실'; -- 0

-- SELECT MIN(salary) FROM tstaff WHERE depart = '비서실'; -- NULL

-- =====================================================================================================
-- 221109

-- GROUP BY
-- 집계 함수는 조건에 맞는 그룹에 대한 통계를 냄.
-- GROUP BY 구문은 그룹핑을 해 줄 뿐이며 어떤 통계를 낼 것인가는 필드 목록의 집계함수에 따라 달라짐.

-- 기본식
-- SELECT 기준필드,집계함수() FROM 테이블 GROUP BY 기준필드;

-- SELECT depart, AVG(salary) FROM tstaff GROUP BY depart;
-- SELECT '인사과', AVG(salary) FROM tstaff WHERE depart = '인사과';

-- SELECT depart, COUNT(*), MAX(joindate), AVG(score) FROM tstaff GROUP BY depart;

-- 연습문제
-- 도시 목록에서 지역별 인구수를 구하라

-- SELECT region,SUM(popu) FROM tcity GROUP BY region;


-- 기준필드
-- GROUP BY의 기준 필드는 중복 값이 있을 때만 의미.
-- SELECT NAME,SUM(salary) FROM tstaff GROUP BY NAME; -- XX --이름처럼 중복 값이 없는 것들은 부적절
-- GROUP BY 절이 있으면 필드 목록에는 기준 필드나 집계 함수만 와야함

-- SELECT gender,depart,COUNT(*) FROM tstaff GROUP BY gender,depart;
-- SELECT gender,depart,COUNT(*) FROM tstaff GROUP BY depart,gender;

-- ====================================================================================================
-- HAVING
-- HAVING은 GROUP BY 다음에 오며 통계 결과 중 출력할 그룹의 조건을 지정.
-- 즉 HAVING GROUP BY 문의 조건절.
-- GROUP BY 다음에 HAVING이 오고 ORDER BY는 항상 제일 마지막.

-- HAVING은 그룹핑이 먼저
-- SELECT depart, AVG(salary) FROM tstaff GROUP BY depart HAVING AVG(salary)>=340;
-- 월급 평균이 340이상인 부서를 그룹핑

-- WHERE은 조건이 먼저
-- SELECT depart, AVG(salary) FROM tstaff WHERE salary > 300 GROUP BY depart;
-- 월급이 300 초과인 것들 중에서 부서를 그룹핑

/*   중요
SELECT depart, AVG(salary) FROM tstaff WHERE salary > 300 GROUP BY depart HAVING AVG(salary) >= 360 ORDER BY depart;
-- 월급이 300 초과인 직원들을 대상으로 부서별 평균 월급을 구하고 그 결과 평균 월급이 360 이상인 부서만 고른 후 부서명으로 정렬.
-- WHERE절이 직원 목록에서 월급 300 이하의 직원을 먼저 제거
-- WHERE절이 HAVING보다 먼저 적용

-- -> 부서별로 그룹핑하여 AVG 함수로 남은 직원의 부서별 평균 월급을 계산.
-- -> HAVING절에 의해 평균 월급이 낮은 부서는 제외.
-- -> 남은 부서를 ORDER BY가 정렬하여 출력
*/

-- SELECT depart, MAX(salary) FROM tstaff WHERE depart IN ('인사과', '영업부') GROUP BY depart; -- 연산이 더 적음

-- SELECT depart, MAX(salary) FROM tstaff GROUP BY depart HAVING depart IN ('인사과','영업부');-- 연산이 더 많음

-- 연습문제
-- 각 지역에서 가장 큰 면적을 구하되 단 인구가 50만 이상인 도시만 대상으로 한다.
-- SELECT region, MAX(AREA), popu FROM tcity WHERE popu >= 50 GROUP BY region ORDER BY MAX(AREA) desc;

-- 각 지역별 평균 면적을 구하되 평균 면적이 1000 이상인 지역만 출력하라.
-- SELECT region, AVG(AREA) FROM tcity GROUP BY region HAVING AVG(AREA) >= 1000;

-- ===================================================================================================================

-- INSERT

-- 새로운 레코드를 추가하는 명령.
-- INSERT문을 스크립트로 작성해 놓으면 많은 데이터를 순차적으로 입력할 수 있어서 편리.

-- 기본형식
-- INSERT INTO 테이블(필드목록) VALUES (값목록);

-- 앞에서 서울 레코드를 삽입하는 원론적인 쿼리문은 다음과 같음
-- INSERT INTO tcity (NAME,AREA,popu,metro,region) VALUES('서울',605,974,'y','경기');

-- 필드목록 생략 가능
-- 단, 값을 필드목록 순서대로 입력해야함
-- INSERT INTO  tcity VALUES('평택',453,51,'n','경기');

 
 -- 연습문제
 -- 도시 목록에 용인을 삽입하라. 면적 293에 인구 98만이되 데이터는 임의 값을 써도 상관없다.
 -- INSERT INTO tcity (NAME,AREA,popu,metro,region) VALUES('용인',293,98,'y','경기');
 
 -- 직원 목록에 자신의 신상을 삽입해 보라.
-- INSERT INTO tstaff VALUES('이승재','총무부','남',20221109,'회장',1000,100); -- 현재 날짜는 now()함수를 써도 됨

-- ============================================================================================================ 
 -- 데이터 초기화
--  TRUNCATE TABLE tcity;
-- ============================================================================================================
/*
INSERT INTO tcity (NAME,AREA,popu,metro,region)values
('서울',605,974,'y','경기'),
('부산',765,342,'y','경상'),
('오산',42,21,'n','경기'),
('청주',940,83,'n','충청'),
('전주',205,65,'n','전라'),
('순천',910,27,'n','전라'),
('춘천',1116,27,'n','강원'),
('홍천',1819,7,'n','강원');
*/

/*
-- 연습문제
-- 도시 목록에 이천(461 킬로미터, 21만)과 대구(883킬로미터, 248만), 영월(1127킬로미터, 4만)을 삽입하라.
INSERT INTO tcity VALUES 
('이천',461,21,'n','경기'),
('대구',883,248,'y','경상'),
('영월',1127,4,'n','강원');
*/
-- ======================================================================================================================
-- 비번 암호화
-- SELECT PASSWORD('1112');

-- ======================================================================================================================
-- INSERT SELECT
-- INSERT 명령은 한번에 하나의 레코드만 삽입하지만, 다른 테이블 또는 자기 자신에게 이미 저장되어 있는 대량의 정보를 복사할 때는
-- 조회한 결과셋을 한꺼번에 삽입할 수 있음.

-- 기본형
-- INSERT INTO 대상테이블 (필드목록) SELECT 필드목록 FROM 원본테이블

-- INSERT INTO와 기본 형식은 비슷하지만 필드의 값을 VALUES절로 지정하지 않고 SELECT 명령으로
-- 다른 테이블에서 읽어온다는 점이 다름.
-- 별도의 문법이라기 보다는 INSERT INTO에 SELECT 명령이 포함된 형식

-- INSERT INTO tstaff (NAME,depart,gender,joindate,grade,salary,score)
-- SELECT NAME,region,metro,'20210629','신입',AREA,popu FROM tcity WHERE region = '경기';

-- =======================================================================================================
-- CREATE SELECT
-- 새로운 테이블을 만들어 결과셋을 삽입

-- 기본형
-- CREATE TABLE 대상테이블 AS SELECT 필드목록 FROM 원본테이블

-- CREATE TABLE tSudo AS SELECT NAME,AREA,popu FROM tcity WHERE region = '경기';

-- 확인
-- SELECT * FROM tsudo;

-- 복사본 만들기
-- tstaff 테이블에 대량의  변경을 가해야 하는데 불안할 경우 다음 명령으로 복사를 뜸.
-- 데이터만 복사하고 primary key는 들고오지 않음

-- CREATE TABLE tstaff_backup_220907 AS SELECT * FROM tstaff;


-- 연습문제
-- 성취도가 80점 이상인 직원만 골라 이름과 월급에 대한 보고서를 별도의 테이블로 작성하라.
-- SELECT NAME,salary,score FROM tstaff WHERE score >= 80;
-- CREATE TABLE tstaff_80over AS SELECT NAME,salary,score FROM tstaff WHERE score >= 80;

-- =================================================================================================
-- DELETE
-- 레코드를 삭제할 때 사용.
-- 삭제는 항상 레코드 단위로 수행함 따라서 필드 지정 없음.

-- 기본형
-- DELETE FROM 테이블 WHERE 조건

-- DELETE FROM tcity WHERE NAME = '부산';
-- 도시명이 '부산'인 레코드 삭제.

-- DELETE FROM tcity WHERE region = '경기';
-- 지역이 경기도인 모든 도시 삭제.

-- 영업부 직원을 전부 해고시켜 보자.
-- DELETE FROM tstaff WHERE depart = '영업부';


-- 삭제 안전장치
-- 삭제하기전에 select문으로 해당 조건을 검색하고 확인 후 삭제 진행하는 것이 좋음

-- ==================================================================================================
-- TRUNCATE
-- 이 명령은 테이블을 완전히 비움.
-- DELETE * FROM tcity;를 써도 모든 데이터가 지워지지만 하나하나 지우기때문에 처리 속도도 느리고 서버에 부하가 걸릴수 있음
-- 따라서 모든 테이블을 지울떄는 TRUNCATE TABLE 테이블명을 사용
-- 물리적인 기억 장소를 깨끗이 비우고 임시 영역에 로그도 남기지 않아 훨씬 빠름.

-- TRUNCATE TABLE tcity;

-- ==================================================================================================
-- UPDATE
-- 레코드의 필드 값을 변경할 때 사용
-- UPDATE 키워드 다음에 변경 대상 테이블을 지정

-- 기본값
-- UPDATE 테이블 SET 필드 = 값[,필드 = 값] WHERE 조건


-- UPDATE tcity SET popu = 1000, region = '충청' WHERE NAME = '서울';
-- name이 서울 인 것의 popu를 1000, region을 충청으로 바꿈

-- UPDATE tcity SET popu = popu * 2 WHERE NAME = '오산';
-- 오산의 popu값을 2배로 만듬

-- 연습문제
-- 여자 사원급을 모두 대리로 진급시켜라
-- UPDATE tstaff_backup_221109 SET grade = '대리' WHERE grade = '사원' AND gender = '여';


-- 영업부 직원의 월급을 10%씩 인상하라
-- UPDATE tstaff_backup_221109 SET salary = salary*1.1 WHERE depart = '영업부';

-- ======================================================================================================
-- CRUD
-- 데이터를 만들고 읽고 갱신하고 삭제하는 네 명령을 합쳐 CRUD Create, Read, Update, Delete 라고 부름.
-- 가장 많이 사용함

 -- =========================================================================================================
 -- 1. 식별자
 -- 테이블의 특정 레코드를 읽거나 변경하려면 레코드끼리 구분할 수 있는 고유의 키(=식별자)가 필요.
--  키는 1) 값이 꼭 있어야 하며, 2) 구분을 위해 고유값을 가져야 함.
-- 또한 아래도 만족해야함

-- 1) 대표성 : 레코드를 상징하는 값이어야한다.
-- 2) 자주 참조하는 속성: 기본키에는 기본적으로 인덱스가 생성되어 검색 효율이 좋다.
-- 3) 가급적 짧은 속성 : 테이블 간의 연결고리가 되므로 비교 속도가 빨라야 한다.

-- 적합한 키 : 주민등록번호,학번,사번,IP,ISBN
-- 부적합한 키 : 키,몸무게,제품 색상, 직급
-- 애매한 키 : 이름,핸드폰,이메일

--  =============================================================================================================
-- 유니크
-- 유니크 UNIQUE 제약은 필드의 중복값을 방지하여 모든 필드가 고유한 값ㅇ르 가지도록 강제
-- 1) 기본키는 NULL을 허용하지 않지만 유니크는 NULL을 허용 // 단, NULL끼리도 중복할 수 없어 딱 하나의 NULL만 존재가능
-- 2) 기본키는 테이블당 하남나 지정할수있지만 유니크는 개수에 상관없이 얼마든지 지정가능
-- 3) 기본키는 자동으로 인덱스를 생성하여 레코드의 정렬순서를 결정하지만 유니크는 아님


